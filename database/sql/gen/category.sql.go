// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category.sql

package gen

import (
	"context"
)

const createCategory = `-- name: CreateCategory :exec
select create_category(
               $1::varchar,
               $2::varchar,
               $3::varchar
       )
`

func (q *Queries) CreateCategory(ctx context.Context, name string, description string, userID string) error {
	_, err := q.db.Exec(ctx, createCategory, name, description, userID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
select delete_category(
               $1::varchar,
               $2::varchar
       )
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID string, userID string) error {
	_, err := q.db.Exec(ctx, deleteCategory, categoryID, userID)
	return err
}

const getCategoriesForUser = `-- name: GetCategoriesForUser :many
select id, name, description, user_id, is_deleted
from list_categories_for_user($1::varchar)
`

func (q *Queries) GetCategoriesForUser(ctx context.Context, userID string) ([]*Categorypayload, error) {
	rows, err := q.db.Query(ctx, getCategoriesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Categorypayload{}
	for rows.Next() {
		var i Categorypayload
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
select update_category(
               $1::varchar,
               $2::varchar,
               $3::varchar
       )
`

func (q *Queries) UpdateCategory(ctx context.Context, categoryID string, name string, description string) error {
	_, err := q.db.Exec(ctx, updateCategory, categoryID, name, description)
	return err
}
