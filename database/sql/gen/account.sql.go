// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package gen

import (
	"context"
)

const createAccount = `-- name: CreateAccount :exec
select
from create_new_account(
        $1,
        $2,
        $3
     )
`

func (q *Queries) CreateAccount(ctx context.Context, userID string, accountName string, initialBalance float32) error {
	_, err := q.db.Exec(ctx, createAccount, userID, accountName, initialBalance)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
select
from delete_account_for_user(
        $1,
        $2
     )
`

func (q *Queries) DeleteAccount(ctx context.Context, accountNumber string, userID string) error {
	_, err := q.db.Exec(ctx, deleteAccount, accountNumber, userID)
	return err
}

const getAccounts = `-- name: GetAccounts :many
select name, balance, account_number, user_id, updated_at, is_deleted
from list_accounts_for_user($1)
`

func (q *Queries) GetAccounts(ctx context.Context, userID string) ([]*Accountpayload, error) {
	rows, err := q.db.Query(ctx, getAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Accountpayload{}
	for rows.Next() {
		var i Accountpayload
		if err := rows.Scan(
			&i.Name,
			&i.Balance,
			&i.AccountNumber,
			&i.UserID,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :exec
select
from update_account_for_user(
        $1,
        $2,
        $3
     )
`

func (q *Queries) UpdateAccount(ctx context.Context, accountNumber string, userID string, accountName string) error {
	_, err := q.db.Exec(ctx, updateAccount, accountNumber, userID, accountName)
	return err
}
