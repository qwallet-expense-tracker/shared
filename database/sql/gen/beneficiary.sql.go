// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: beneficiary.sql

package gen

import (
	"context"
)

const createBeneficiary = `-- name: CreateBeneficiary :exec
select create_beneficiary(
               $1,
               $2,
               $3,
               $4
       )
`

func (q *Queries) CreateBeneficiary(ctx context.Context, userID string, name string, accountNumber string, description string) error {
	_, err := q.db.Exec(ctx, createBeneficiary,
		userID,
		name,
		accountNumber,
		description,
	)
	return err
}

const deleteBeneficiary = `-- name: DeleteBeneficiary :exec
select delete_beneficiary(
               $1,
               $2
       )
`

func (q *Queries) DeleteBeneficiary(ctx context.Context, beneficiaryID string, userID string) error {
	_, err := q.db.Exec(ctx, deleteBeneficiary, beneficiaryID, userID)
	return err
}

const getBeneficiaries = `-- name: GetBeneficiaries :many
select id, account_number, name, description, user_id, updated_at, is_deleted
from list_beneficiaries_for_user(
        $1,
        $2,
        $3
     )
`

func (q *Queries) GetBeneficiaries(ctx context.Context, userID string, pageNumber int32, pageSize int32) ([]*Beneficiarypayload, error) {
	rows, err := q.db.Query(ctx, getBeneficiaries, userID, pageNumber, pageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Beneficiarypayload{}
	for rows.Next() {
		var i Beneficiarypayload
		if err := rows.Scan(
			&i.ID,
			&i.AccountNumber,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBeneficiary = `-- name: GetBeneficiary :one
select id, account_number, name, description, user_id, updated_at, is_deleted
from get_beneficiary(
        $1,
        $2
     )
`

func (q *Queries) GetBeneficiary(ctx context.Context, beneficiaryID string, userID string) (*Beneficiarypayload, error) {
	row := q.db.QueryRow(ctx, getBeneficiary, beneficiaryID, userID)
	var i Beneficiarypayload
	err := row.Scan(
		&i.ID,
		&i.AccountNumber,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return &i, err
}

const updateBeneficiary = `-- name: UpdateBeneficiary :exec
select update_beneficiary(
               $1,
               $2,
               $3,
               $4,
               $5
       )
`

func (q *Queries) UpdateBeneficiary(ctx context.Context, beneficiaryID string, userID string, name string, accountNumber string, description string) error {
	_, err := q.db.Exec(ctx, updateBeneficiary,
		beneficiaryID,
		userID,
		name,
		accountNumber,
		description,
	)
	return err
}
