// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package gen

import (
	"context"
)

const createPassword = `-- name: CreatePassword :exec
select create_password(
               $1::varchar,
               $2::varchar)
`

func (q *Queries) CreatePassword(ctx context.Context, userID string, password string) error {
	_, err := q.db.Exec(ctx, createPassword, userID, password)
	return err
}

const createUser = `-- name: CreateUser :one
select id, email, name, phone_number, avatar_url, is_deleted
from create_user(
        $1::varchar,
        $2::varchar,
        $3::varchar,
        $4::varchar,
        $5::varchar,
        $6::varchar
     )
`

func (q *Queries) CreateUser(ctx context.Context, email string, authID string, phoneNumber string, password string, name string, avatarUrl string) (*Userpayload, error) {
	row := q.db.QueryRow(ctx, createUser,
		email,
		authID,
		phoneNumber,
		password,
		name,
		avatarUrl,
	)
	var i Userpayload
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.AvatarUrl,
		&i.IsDeleted,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, name, phone_number, avatar_url, is_deleted
from get_user_by_email($1::varchar)
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*Userpayload, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Userpayload
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.AvatarUrl,
		&i.IsDeleted,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, email, name, phone_number, avatar_url, is_deleted
from get_user_by_id($1::varchar)
`

func (q *Queries) GetUserByID(ctx context.Context, userID string) (*Userpayload, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i Userpayload
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.AvatarUrl,
		&i.IsDeleted,
	)
	return &i, err
}

const getUserStats = `-- name: GetUserStats :one
select total_accounts, total_transactions, total_categories, total_goals, account_balance, account_number, total_income, total_expense
from get_user_stats($1::varchar)
`

func (q *Queries) GetUserStats(ctx context.Context, email string) (*Userstats, error) {
	row := q.db.QueryRow(ctx, getUserStats, email)
	var i Userstats
	err := row.Scan(
		&i.TotalAccounts,
		&i.TotalTransactions,
		&i.TotalCategories,
		&i.TotalGoals,
		&i.AccountBalance,
		&i.AccountNumber,
		&i.TotalIncome,
		&i.TotalExpense,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
select id, email, name, phone_number, avatar_url, is_deleted
from list_users()
`

func (q *Queries) GetUsers(ctx context.Context) ([]*Userpayload, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Userpayload{}
	for rows.Next() {
		var i Userpayload
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.PhoneNumber,
			&i.AvatarUrl,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
select id, email, name, phone_number, avatar_url, is_deleted
from login_user(
        $1::varchar,
        $2::varchar,
        $3::varchar,
        $4::varchar,
        $5::varchar
     )
`

func (q *Queries) LoginUser(ctx context.Context, authID string, email string, name string, phoneNumber string, avatarUrl string) (*Userpayload, error) {
	row := q.db.QueryRow(ctx, loginUser,
		authID,
		email,
		name,
		phoneNumber,
		avatarUrl,
	)
	var i Userpayload
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.AvatarUrl,
		&i.IsDeleted,
	)
	return &i, err
}

const loginWithPassword = `-- name: LoginWithPassword :one
select id, email, name, phone_number, avatar_url, is_deleted
from login_user_with_password(
        $1::varchar,
        $2::varchar)
`

func (q *Queries) LoginWithPassword(ctx context.Context, userID string, password string) (*Userpayload, error) {
	row := q.db.QueryRow(ctx, loginWithPassword, userID, password)
	var i Userpayload
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.AvatarUrl,
		&i.IsDeleted,
	)
	return &i, err
}

const revokePassword = `-- name: RevokePassword :exec
select revoke_password(
               $1::varchar)
`

func (q *Queries) RevokePassword(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, revokePassword, userID)
	return err
}

const updateUser = `-- name: UpdateUser :one
select id, email, name, phone_number, avatar_url, is_deleted
from update_user(
        $1::varchar,
        $2::varchar,
        $3::varchar,
        $4::varchar)
`

func (q *Queries) UpdateUser(ctx context.Context, userID string, name string, phoneNumber string, avatarUrl string) (*Userpayload, error) {
	row := q.db.QueryRow(ctx, updateUser,
		userID,
		name,
		phoneNumber,
		avatarUrl,
	)
	var i Userpayload
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PhoneNumber,
		&i.AvatarUrl,
		&i.IsDeleted,
	)
	return &i, err
}
