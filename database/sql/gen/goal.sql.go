// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: goal.sql

package gen

import (
	"context"
)

const createGoal = `-- name: CreateGoal :exec
select create_goal($1, $2,
                   $3, $4)
`

func (q *Queries) CreateGoal(ctx context.Context, userID string, name string, targetAmount float32, description string) error {
	_, err := q.db.Exec(ctx, createGoal,
		userID,
		name,
		targetAmount,
		description,
	)
	return err
}

const deleteGoal = `-- name: DeleteGoal :exec
select delete_goal($1, $2)
`

func (q *Queries) DeleteGoal(ctx context.Context, goalID string, userID string) error {
	_, err := q.db.Exec(ctx, deleteGoal, goalID, userID)
	return err
}

const listUserGoals = `-- name: ListUserGoals :many
select id, name, target, description, balance, user_id, is_deleted
from list_goals_for_user($1, $2, $3)
`

func (q *Queries) ListUserGoals(ctx context.Context, userID string, pageNumber int32, pageSize int32) ([]*Goalpayload, error) {
	rows, err := q.db.Query(ctx, listUserGoals, userID, pageNumber, pageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Goalpayload{}
	for rows.Next() {
		var i Goalpayload
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Target,
			&i.Description,
			&i.Balance,
			&i.UserID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoal = `-- name: UpdateGoal :exec
select update_goal($1, $2,
                   $3, $4,
                   $5)
`

func (q *Queries) UpdateGoal(ctx context.Context, goalID string, userID string, name string, targetAmount float32, description string) error {
	_, err := q.db.Exec(ctx, updateGoal,
		goalID,
		userID,
		name,
		targetAmount,
		description,
	)
	return err
}
